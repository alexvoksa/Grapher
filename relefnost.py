import pandas as pd
import numpy as np
import re
import os.path
from tqdm import tqdm
from tqdm import trange
import time

"""
# в этом словаре находятся названия файлов и их давления или чистота гелия
pressure = {
    'СОП-02': 5,
    'СОП-03': 8,
    'СОП-05': 6,
    'СОП-07': 6,
    'СОП-08': 6
}


pressure = {
    '00282C4V': 96.7,
    '00203C4V': 96.2,
    '00397C4V1': 95.8,
    '00359C4V1': 96.9,
    '00378C4V': 96.6,
    '00381C4V1': 96.8
}
"""
pressure = {
    '444807-2': 97.32,
    '444843-2': 98.11,
    '445798-2': 98.6,
    '445799-2': 98.35
}
rellist = []


# это список с путем к исследоваемым файлам ВНИМАНИЕ путь к файлу должен быть указан строго как здесь
""" lis = [
    r'АЧХ чистые/СОП-02_0_700_5,0_1.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_2.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_3.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_4.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_5.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_6.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_7.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_8.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_9.txt',
    r'АЧХ чистые/СОП-02_0_700_5,0_10.txt',
    r'АЧХ чистые/СОП-03_100_500_5,0_1.txt',
    r'АЧХ чистые/СОП-03_100_500_5,0_2.txt',
    r'АЧХ чистые/СОП-03_100_500_5,0_3.txt',
    r'АЧХ чистые/СОП-03_100_500_5,0_4.txt',
    r'АЧХ чистые/СОП-03_100_500_5,0_5.txt',
    r'АЧХ чистые/СОП-03_100_500_5,0_6.txt',
    r'АЧХ чистые/СОП-03_100_500_5,0_7.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_8.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_9.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_10.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_11.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_12.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_13.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_14.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_15.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_16.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_17.txt',
    r'АЧХ чистые/СОП-05_100_500_5,0_18.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_11.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_12.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_13.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_14.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_15.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_16.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_17.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_18.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_19.txt',
    r'АЧХ чистые/СОП-07_0_700_5,0_20.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_19.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_20.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_21.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_22.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_23.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_24.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_25.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_26.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_27.txt',
    r'АЧХ чистые/СОП-08_100_500_5,0_28.txt'
]

lis = [
    r'Реальные ТВЭЛы/00203C4V_10_400_1,0_1.txt',
    r'Реальные ТВЭЛы/00282C4V_10_400_1,0_11.txt',
    r'Реальные ТВЭЛы/00359C4V1_10_400_1,0_7.txt',
    r'Реальные ТВЭЛы/00378C4V_10_400_1,0_12.txt',
    r'Реальные ТВЭЛы/00381C4V1_10_400_1,0_10.txt',
    r'Реальные ТВЭЛы/00397C4V1_10_400_1,0_6.txt'
]
"""
lis = [
r'БН/444807-2_10_400_1,0_1.txt',
r'БН/444807-2_10_400_1,0_2.txt',
r'БН/444807-2_10_400_1,0_3.txt',
r'БН/444843-2_10_400_1,0_1.txt',
r'БН/444843-2_10_400_1,0_2.txt',
r'БН/444843-2_10_400_1,0_3.txt',
r'БН/444843-2_10_400_1,0_4.txt',
r'БН/445798-2_10_400_1,0_1.txt',
r'БН/445798-2_10_400_1,0_2.txt',
r'БН/445798-2_10_400_1,0_3.txt',
r'БН/445799-2_10_400_1,0_1.txt',
r'БН/445799-2_10_400_1,0_2.txt'
]
names = []

minfre = int(10)  # задание переменной которая отвечает за нижн границу диапазона к которому будут приводиться данные
maxfre = int(400)  # задание переменной которая отвечает за верх границу диапазона к которому будут приводиться данные


def filter():
    global data, maxfre, minfre, d2
    ampl = []
    freq = []
    print('Фильтрую данные')
    for i in range(len(data.loc[1])):
        if maxfre >= data.at[1, i] >= minfre:
            ampl.append(data.at[0, i])
            freq.append(data.at[1, i])
    #   Создаем новый отфильтрованный датафрейм
    data = pd.DataFrame([ampl, freq])
    d1 = int(len(data.loc[0]))
    d2 = round((maxfre - minfre) / d1, 7)
    #   ниже идет заполнение строк данными о частотах из диапазона частот выше
    data.loc[1] = [minfre + i * d2 for i in range(d1)]
    print('Данные отфильтрованы в диапазон ', str(minfre)+'-'+str(maxfre), 'кГц')


def relef():
    global data, zz, name2, pressure, d2
    compare = []
    for k in range(2, len(data.loc[0])):
        print('\nИсследую диапазон в ', k*d2, 'кГц')
        m = 0
        for y in tqdm(range(1, len(data.loc[0]), k), desc='Расчитываю рельефность для диапазона', leave=False):
            diff = np.diff(data.loc[0, m: y].to_list()) / np.diff(data.loc[1, m: y].to_list())
            rel = round(np.trapz(abs(diff), x=data.loc[1, m + 1:y].to_list()) /
                        np.trapz(data.loc[0, m:y].to_list(), x=data.loc[1, m:y].to_list()), 5)
            press = pressure.get(name2[0]) # для чистоты гелия
            intermax = round(float(data.loc[1, y]), 4)
            intermin = round(float(data.loc[1, m]), 4)
            spec = (zz, rel, press, intermax, intermin)
            compare.append(spec)
            m = y
    megadata = pd.DataFrame(compare)
    print('Сохраняем файл...')
    megadata.to_csv(r'БНЧистота гелия/relefnost_{}_{}_{}.csv'.format(zz, press, int(name2[4])), header=False, index=False)
    megadata = 0


def createfinalframe():
    global minfre
    global maxfre
    global inter
    global rellist
    global name2
    global zz
    global data

    for lo in lis:
        #  загрузка данных из имени файла
        name, ext = os.path.splitext(lo)
        name1 = re.split('/', name)
        name2 = re.split('_', name1[1])
        print('Загружаю данные АЧХ для:', name2[0]+'_'+name2[4])
        # ext2, zz = name2[0].split('-') используется для давления гелия
        # zz = int(zz)
        zz = name2[0]  # используется для чистоты гелия
        #   загрузка данных в датафрейм
        data = pd.read_csv('{}'.format(lo), header=None, decimal=",", delimiter=r"\s+", nrows=1)
        #   утверждение границ получаемых частот
        d1 = int(len(data.loc[0]))
        minim = float(name2[1])
        maxim = float(name2[2])
        d2 = round((maxim - minim) / d1, 7)
        #   ниже идет заполнение строк данными о частотах из диапазона частот выше
        data.loc[1] = [minim + i * d2 for i in range(d1)]
        #   фильтрация в диапазон minfre-maxfre
        filter()
        #   расчет рельефности
        relef()


createfinalframe()
